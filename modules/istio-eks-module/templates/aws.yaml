{% set workspace = '' %}   {# has to be a persistent volume #}
{% set pipeline_env_file = workspace|add:'.env' %}
{% set pipeline_secret_file = workspace|add:'.secret.env' %}
{% set pipeline_modules_path = workspace|add:'pipeline_modules' %}
{% set helm_chart_path = pipeline_modules_path|add:"/helm/aws/istio-eks" %}

version: 0.2
phases:
  install:
    commands:
      - wget https://get.helm.sh/helm-v3.5.3-linux-amd64.tar.gz
      - tar -zxvf helm-v3.5.3-linux-amd64.tar.gz
      - mv linux-amd64/helm /usr/local/bin/helm
  build:
    commands:
      - export PATH="{{workspace}}/bin:$PATH"
      - aws eks --region {{region}} update-kubeconfig --name {{cluster}} --role-arn {{roleArn}}
      {% if job_type == 'deploy' %}
      - cp {{pipeline_env_file}} {{helm_chart_path}} 2>/dev/null || :;
      - cp {{pipeline_secret_file}} {{helm_chart_path}} 2>/dev/null || :;
      - cd {{helm_chart_path}} ;
      - touch .helmignore;
      - |
        {% if files %}
        {% for mounthPath, fs in files %}
        {% if fs %}
        {% for file in fs %}
        aws s3 cp s3://{{customer_bucket}}/{{file}} {{file}} ;
        openssl aes-256-cbc -md sha256 -pbkdf2 -d -in {{file}} -out {{file}} -k $vg_pipeline_artifact_aes_key
        {% endfor %}
        {% endif %}
        {% endfor %}
        # aws s3 rm  s3://{{customer_bucket}} --recursive ;
        {% endif %}
        rm -f values.yaml;

        if [ -z "$docker_registry" ]; then
        export docker_registry="index.docker.io"
        fi

        echo "projectName: {{projectName}}
        applicationName: {{applicationName}} #auto
        environment:  {{environment}} #auto
        project: {{project}} #auto
        manageCertificate: {{manageCertificate}}
        {% if istioInjection %}
        istioInjection: enabled
        {% else %}
        istioInjection: disabled
        {% endif %}
        {% if deployment %}
        deploy:
          replicaCount: {{replicaCount}}
          strategy: RollingUpdate
          maxUnavail: {{maxUnavail}}
          maxSurge: {{maxSurge}}
          terminationGracePeriodSeconds: {{terminationGracePeriodSeconds}}
          healthCheck:
            liveFailThreshold: '{{liveFailThreshold}}'
            liveSuccThreshold: '{{liveSuccThreshold}}'
            readFailThreshold: '{{readFailThreshold}}'
            readSuccThreshold: '{{readSuccThreshold}}'
            delay: '{{probeDelay}}'
            period: '{{probePeriod}}'
            timeout: '{{probeTimeout}}'

        image: #auto
          repository: {{ repository }}
          pullPolicy: Always
          tag:  {{ tag }}
          registryCredentials:
            registry: $docker_registry
            username: $docker_username" >> values.yaml

        printf '    password: %s\n' "$(printf '%s' "$docker_password" | jq -aRs .)" >> values.yaml

        echo "
        {% endif %}
        {% if ports %}
        ports:
        {% for port in ports%}
          - name: {{port.name}}
            containerPort: {{port.containerPort}}
            protocol: {{port.protocol}}
            {% if port.healthCheck %}
            healthcheck: {{port.healthCheck}}
            {% endif %}
        {% endfor %}
        {% endif %}

        {% if ports %}
        service:
          type: {{ service_port }}
          private: false
        {% endif %}

        {% if domains %}
        domains:
        {% for domain in domains %}
        - name: {{domain.name}}
        {% endfor %}
        {% endif %}

        {% if virtualService %}
        virtualService:
        {% for vs in virtualService %}
          prefix: {{vs.prefix}}
          rewrite:
            enabled: {{vs.rewriteEnabled | lower }}
            value: {{vs.rewriteValue}}
        {% endfor %}
        {% endif %}


        autoscaling:
          enabled: {{autoscalingEnabled}}
          minReplicas: {{minReplicas}}
          maxReplicas: {{maxReplicas}}
          targetCPUUtilizationPercentage: {{targetCPUUtilizationPercentage}}

        resourcequota:
          quotaRequestsCpu: 100
          quotaRequestsMem: 0.2
          quotaLimitsCpu: 200
          quotaLimitsMem: 0.3

        resources:
          limits:
            cpu: {{cpuLimit}}
            memory: {{memoryLimit}}
          requests:
            cpu: {{cpuRequest}}
            memory: {{memoryRequest}}

        lifecycle:
          prestop:
            command: ['/bin/sh', '-c', 'sleep 30']

        artifacts:
        {% for mountPath, fs in files %}
          - mountPath: {{mountPath}}
            files:
            {% for file in fs %}
              - '{{file}}'
            {% endfor %}
        {% endfor %}
        envs:" >> values.yaml;
        cat {{pipeline_env_file}} | while IFS= read -r line; do
        value=${line#*=}
        name=${line%%=*}
        printf '  %s: %s\n' $name "$value" >> values.yaml
        done;
        echo "secrets:" >> values.yaml;
        cat {{pipeline_secret_file}} | while IFS= read -r line; do
        value=${line#*=}
        name=${line%%=*}
        printf '  %s: %s\n' $name $value >> values.yaml
        done; 

      - helm upgrade --install -f values.yaml {{applicationName}}-{{environment}} . #--atomic --timeout {{deployment_timeout}}

    {% else %}
      - helm list 
      - helm uninstall {{applicationName}}-{{environment}}
    {% endif %}
