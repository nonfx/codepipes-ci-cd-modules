{% set workspace = '' %}   {# has to be a persistent volume #}
{% set pipeline_env_file = workspace|add:'.env' %}
{% set pipeline_secret_file = workspace|add:'.secret.env' %}
{% set pipeline_modules_path = workspace|add:'pipeline_modules' %}
{% set helm_chart_path = pipeline_modules_path|add:"/helm/azure/cert-manager" %}

steps:
  - task: HelmInstaller@0
    inputs:
      helmVersion: {{helmVersion}}
      installKubectl: true
      kubectlVersion: {{kubectlVersion}}
  - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
        az aks get-credentials --name {{cluster}} --resource-group {{resourceGroup}} --subscription $(ARM_SUBSCRIPTION_ID) --overwrite-existing -a
    displayName: "Get AKS Kubecofing"
    workingDirectory: {{ workingDir }}
  - script: |
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version {{certManagerVersion}} --set installCRDs=true
    displayName: "Install CertManager"
    workingDirectory: {{ workingDir }}
  - script: |
        export PATH="{{workspace}}/bin:$$PATH";
        cp {{pipeline_env_file}} {{helm_chart_path}} 2>/dev/null || :;
        cp {{pipeline_secret_file}} {{helm_chart_path}} 2>/dev/null || :;
        cd {{helm_chart_path}} ;
        touch .helmignore;
        rm -f values.yaml;
        echo "projectName: {{projectName}}
        applicationName: {{applicationName}} #auto
        environment:  {{environment}} #auto
        project: {{project}} #auto
        managedCertificate: {{managedCertificate}}
        azure:
            clientID: $(ARM_CLIENT_ID)
            tenantID: $(ARM_TENANT_ID)
            subscriptionID: $(ARM_SUBSCRIPTION_ID)
            resourceGroup: {{resourceGroup}}
            hostedZone: {{hostedZone}}

        {% if domains %}
        domains:
        {% for domain in domains %}
        - name: {{domain.name}}
        {% endfor %}
        {% endif %}

        envs:" >> values.yaml;
        cat {{pipeline_env_file}} | while IFS= read -r line; do
        value=${line#*=}
        name=${line%%=*}
        printf '  %s: %s\n' $name "$value" >> values.yaml
        done;
        echo "secrets:" >> values.yaml;
        cat {{pipeline_secret_file}} | while IFS= read -r line; do
        value=${line#*=}
        name=${line%%=*}
        printf '  %s: %s\n' $name $value >> values.yaml
        done;
    displayName: "Generate values file"
    workingDirectory: {{ workingDir }}
  {% if job_type == 'deploy' %}
  - script: |
          cd {{helm_chart_path}} ;
          cat values.yaml;
          helm upgrade --install -f values.yaml {{applicationName}}-{{environment}} . #--atomic --timeout {{deployment_timeout}} --create-namespace
    displayName: "Helm Deploy {{applicationName}}"
    workingDirectory: {{ workingDir }}
  {% else %}
  - script: |
          cd {{helm_chart_path}} ;
          helm list;
          helm uninstall {{applicationName}}-{{environment}};
    displayName: "Helm Uninstall {{applicationName}}"
    workingDirectory: {{ workingDir }}
  {% endif %}
