{% set workspace = '/workspace' %}   {# has to be a persistent volume #}
{% set pipeline_env_file = workspace|add:'/.env' %}
{% set pipeline_secret_file = workspace|add:'/.secret.env' %}
{% set pipeline_modules_path = workspace|add:'/pipeline_modules' %}
{% set helm_chart_path = pipeline_modules_path|add:"/helm/gcp/basic-gke" %}
{% set common_scripts_path = pipeline_modules_path|add:'/assets/scripts' %}


steps:
- id: 'gcloud container setup'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials {{cluster}} --region {{region}}
- id: 'Install helm'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    git clone https://github.com/GoogleCloudPlatform/cloud-builders-community.git;
    cd cloud-builders-community/helm;
    docker build -t gcr.io/$PROJECT_ID/helm:latest . ;
{% if job_type == 'deploy' %}
- id: 'Setup helm values'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    export PATH="{{workspace}}/bin:$$PATH";    
    {{ common_scripts_path }}/install-jq.sh
    
    cd {{helm_chart_path}} ;

    touch .helmignore;
    {% if files %}
    {% for mounthPath, fs in files %}
    {% if fs %}
    {% for file in fs %}
    gsutil cp gs://{{customer_bucket}}/{{file}} . ;
    openssl aes-256-cbc -md sha256 -pbkdf2 -d -in {{file}} -out {{file}} -k $$vg_pipeline_artifact_aes_key
    {% endfor %}
    {% endif %}
    {% endfor %}
    gsutil rm -r gs://{{customer_bucket}} ;
    {% endif %}
    rm -f values.yaml;

    if [ -z "$docker_registry" ]; then
    export docker_registry="index.docker.io"
    fi

    echo "applicationName: {{applicationName}} #auto
    environment:  {{environment}} #auto
    project: {{project}} #auto
    deploy:
      replicaCount: 1
      strategy: RollingUpdate
      maxUnavail: 1
      maxSurge: 1
      terminationGracePeriodSeconds: 30
      healthCheck:
        liveFailThreshold: '2'
        liveSuccThreshold: '1'
        readFailThreshold: '2'
        readSuccThreshold: '1'
        delay: '10'
        period: '4'
        timeout: '2'
    ports:
    {% for port in ports%}
      - name: {{port.name}}
        containerPort: {{port.containerPort}}
        protocol: {{port.protocol}}
        {% if port.healthCheck %}
        healthcheck: {{port.healthCheck}}
        {% endif %}
    {% endfor %}
    image: #auto
      repository: {{ repository }}
      pullPolicy: Always
      tag:  {{ tag }}
      registryCredentials:
        registry: $$docker_registry
        username: $$docker_username" >> values.yaml

    printf '    password: %s\n' "$(printf '%s' "$$docker_password" | jq -aRs .)" >> values.yaml
    echo "
    service:
      type: nodeport
      private: false
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
    resourcequota:
      quotaRequestsCpu: 100
      quotaRequestsMem: 0.2
      quotaLimitsCpu: 200
      quotaLimitsMem: 0.3
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    lifecycle:
      prestop:
        command: ['/bin/sh', '-c', 'sleep 30']
    artifacts:
    {% for mountPath, fs in files %}
      - mountPath: {{mountPath}}
        files:
        {% for file in fs %}
          - '{{file}}'
        {% endfor %}
    {% endfor %}
    envs:" >> values.yaml;
    cat {{pipeline_env_file}} | while IFS= read -r line; do
    value=${line#*=}
    name=${line%%=*}
    printf '  %s: %s\n' $name "$value" >> values.yaml
    done;
    echo "secrets:" >> values.yaml;
    cat {{pipeline_secret_file}} | while IFS= read -r line; do
    value=${line#*=}
    name=${line%%=*}
    printf '  %s: %s\n' $name $value >> values.yaml
    done;
- id: 'Install Application'
  name: 'gcr.io/$PROJECT_ID/helm'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    cd {{helm_chart_path}} ;
    helm upgrade --install -f values.yaml {{applicationName}}-{{environment}} . --atomic --timeout {{deployment_timeout}}
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "###pipeline-summary-start###" >> summary.txt 2>&1;
    {% if pipeline_summary_var %}
    {% for summary in pipeline_summary_var %}
    {{ summary.Command }} | xargs -0 printf "{{ summary.Name }}=%s\n" >>  summary.txt 2>&1; {% endfor %}
    {% endif %}
    {% if ports %}
      summary=""
      count=30
      while [ true ]
      do
        sleep 2
        summary=`kubectl get ingress -n {{applicationName}} -o=jsonpath={.items[*].status.loadBalancer.ingress[*].ip}`
        if [ ! -z "$summary" ]; then
          echo "Service URL=http://"$summary >> summary.txt
          break
        fi
        if [ $count -eq 0 ]; then
          break
        fi
        count=`expr $count - 1`
      done
    {% endif %}
    echo "###pipeline-summary-end###" >> summary.txt 2>&1;
    cat summary.txt;
{% else %}
- id: 'Uninstall application'
  name: 'gcr.io/$PROJECT_ID/helm'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    cd {{helm_chart_path}} ;
    helm list;
    helm uninstall {{applicationName}}-{{environment}};
{% endif %}
