########################################################################################################################################################
# The template uses serverless framework to deploy function to lambdas using container images                                                          #
# Uses serverless-deployment-bucket plugin to keep iac code                                                                                            #
# Uses machine env from .env file https://www.serverless.com/framework/docs/environment-variables                                                           #
########################################################################################################################################################
{% set workspace = '$CODEBUILD_SRC_DIR' %}   {# has to be a persistent volume #}
{% set pipeline_env_file = workspace|add:'/.env' %}
{% set source_code_path = workspace|add:'/source_code' %}

version: 0.2
phases:
  install:
    commands:
      - aws configure set region {{region}}
      - npm install -g npm
      - npm install serverless -g
      - npm install serverless-deployment-bucket -g
  build: 
    commands:
      - |
        echo "
        service: {{applicationName}}
        useDotenv: true
        frameworkVersion: '3'
        provider:
          name: aws
          stage: {{environment}}
          runtime: {{runtime}}
          memorySize: {{memory}}
          timeout: {{timeout}}
          deploymentBucket:
            name: {{ bucket }}
        functions:
        {% for func in funcs %} 
          {{ func.name }}:
            handler: {{ func.handler }}
            events:
              - httpApi:
                  path: {{ func.path }}
                  method: {{ func.verb }}
        {% endfor %}  
        plugins:
          - serverless-deployment-bucket  
        " >> serverless.yml
    {% if job_type == 'deploy' %}
      - cd {{source_code_path}}/{{repo_dir}}/
      - ls && make
      - serverless deploy
    {% else %}
      - serverless remove
    {% endif %}
  {% if job_type == 'deploy' %}
  post_build:
    commands:
      - echo "###pipeline-summary-start###" >> summary.txt 2>&1;
      - | 
        grab=$(sls info | sed -n "/{% if funcs | length > 1 %}endpoints{% else %}endpoint{% endif %}:/,/functions:/p" | sed 's/endpoint:/ /g' | sed 's/functions:/ /g' | xargs')
        count=1
        while IFS= read -r line; do
            replaceTxt='='
            echo "$count ${line/ - /$replaceTxt}" >> summary.txt 
            let "count+=1" 
        done <<< "$grab"
      - echo "###pipeline-summary-end###" >> summary.txt 2>&1;
      - cat summary.txt
  {% endif %}