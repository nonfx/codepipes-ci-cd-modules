{% set artifact_root_path = artifact_dir %}     {# <artifact_bucket>/<artifact_dir> #}
{% set artifact_build_path = artifact_dir|add:"/$(Build.BuildId)" %}     {# <artifact_dir>/$(Build.BuildId) #}
{% set local_checkout_path = '$(System.DefaultWorkingDirectory)/code' %}
{% set local_code_path = local_checkout_path|add:"/"|add:iac_root %}
{% set local_artifact_path = '$(System.DefaultWorkingDirectory)/artifacts' %}
{% set tf_plan_json_file = tf_plan_file|add:".json" %}                      {# <tf_plan_file>.json #}
{% set tf_var_name_prefix = 'VG_TF_VAR_' %}
{% set tf_var_file_path = '/tmp/vg_tf_var_values.tfvars' %}
{% set tf_var_name_dash_placeholder = '___' %}
{% set local_error_sentinel_path = '$(System.DefaultWorkingDirectory)/_fail' %}

{# redirects shell command output to a log file #}
{%- macro logger(name, stdout=true) -%}
{{ local_artifact_path }}/{{ get_log_name(name) }}{% if stdout %} 2>&1{% endif %}
{%- endmacro -%}

{# shell command to set a sentinel file signaling failure #}
{%- macro set_fail_flag(operation) -%}
echo "{{ operation }}" > {{ local_error_sentinel_path }}
{%- endmacro -%}

{# shell command to fail pipeline if there are failures in terraform #}
{%- macro fail_on_flag() -%}
set -e;! test -f {{ local_error_sentinel_path }} || (echo "Following operation has failed: $(cat {{ local_error_sentinel_path }})"; exit 1); set +e;
{%- endmacro %}

{# generates a standard log name from action and name suffix #}
{% macro get_log_name(suffix) %}{{ tf_action }}_terraform_{{ suffix }}.log{% endmacro %}

{# uploads a log file generated by the logger, does not fail on error #}
{% macro upload_log(name) -%}
{{ upload_artifact(get_log_name(name), true) }}
{%- endmacro %}

{# uploads a file artifact, by default fail on error #}
{% macro upload_artifact(file, ignore_err=false) -%}
az storage blob upload   --name "{{ artifact_build_path }}/{{ file }}" --file "{{ local_artifact_path }}/{{ file }}" --account-name {{storage_account_name}} --auth-mode login --container-name {{artifact_bucket}}
{%- endmacro %}

{% macro download_artifact(file, ignore_err=false) -%}
az storage blob download --name "{{ artifact_root_path }}/{{ file }}" --file "{{ local_artifact_path }}/{{ file }}" --account-name {{storage_account_name}} --auth-mode login --container-name {{artifact_bucket}}
{%- endmacro %}

variables:
  - name: TF_IN_AUTOMATION
    value: 'true'
  - name: TF_INPUT
    value: 'false'
  - name: TF_LOG
    value: '{{ tf_log_level }}'
steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Terraform install'
  inputs:
    terraformVersion: {{ tf_version }}
- script: |
    set -x
    az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) -t $(ARM_TENANT_ID)
    {% for env_key, env_value in pipeline_env -%}
    export {{ env_key }}="{{ env_value }}"
    {% endfor -%}
    {% for env_key, env_value in pipeline_secret_env -%}
    export {{ env_key }}="$({{ env_key }})"
    {% endfor -%}
    mkdir -p "{{ local_artifact_path }}"
    {{ download_artifact(tf_state_file) }}
    git clone --no-checkout "{{ iac_checkout_src }}" "{{ local_checkout_path }}"
    cd "{{ local_checkout_path }}"
    git checkout "{{ iac_checkout_target }}"
    # include infrastructure component modules
    find . -name "cp_components*.tf" -maxdepth 1 -type f -exec cp -f "{}" "{{ local_code_path }}" \;
    printenv | grep "{{ tf_var_name_prefix }}*" | sed 's/^{{ tf_var_name_prefix }}//' | awk -F '=' -v OFS='=' '{ gsub("{{ tf_var_name_dash_placeholder }}", "-", $1); st = index($0,"="); val=substr($0,st+1); print $1, val ~ /^{.*?}$/ || val ~ /^\[.*?\]$/ ? val:"\""val"\"" }' > {{ tf_var_file_path }}
    cd "{{ local_code_path }}"
    # copy pre-existing terraform state to the working directory
    test ! -f "{{ local_artifact_path }}/{{ tf_state_file }}" || cp -f -v {{ local_artifact_path }}/{{ tf_state_file }} {{ local_code_path }}/{{ tf_state_file }} > {{ logger('init') }}
    # terraform init
    terraform init >> {{ logger('init') }} || {{ set_fail_flag('terraform init') }}
    az account set --subscription $(ARM_SUBSCRIPTION_ID)
    {{ upload_log('init') }}
    {{ fail_on_flag() }}
    {% if tf_action == 'plan' || tf_action == 'plan-destroy' %}
    # terraform plan
    terraform plan -var-file={{ tf_var_file_path }} {% if tf_action == 'plan-destroy' %}-destroy{% endif %} -out={{ local_artifact_path }}/{{ tf_plan_file }} -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('plan') }} || {{ set_fail_flag('terraform plan') }}
    # terraform show
    terraform show -json {{ local_artifact_path }}/{{ tf_plan_file }} 1> {{ local_artifact_path }}/{{ tf_plan_json_file }} 2>> {{ logger('plan', false) }} || {{ set_fail_flag('terraform plan') }}
    {{ upload_log('plan') }}
    {{ fail_on_flag() }}
    {{ upload_artifact(tf_plan_file) }}
    {{ upload_artifact(tf_plan_json_file) }}
    {% elif tf_action == 'apply' %}
    {{ download_artifact(tf_plan_file) }}
    # terraform apply
    terraform apply -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} {{ local_artifact_path }}/{{ tf_plan_file }} > {{ logger('apply') }}
    {{ upload_log('apply') }}
    {{ upload_artifact(tf_state_file) }}
    {% elif tf_action == 'destroy' %}
    # terraform destroy
    terraform destroy -var-file={{ tf_var_file_path }} -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('destroy') }}
    {{ upload_log('destroy') }}
    {{ upload_artifact(tf_state_file) }}  {# upload the state even if the TF action failed as it may have already been modified #}
    {% endif %}
    az logout
  timeoutInMinutes: 300
