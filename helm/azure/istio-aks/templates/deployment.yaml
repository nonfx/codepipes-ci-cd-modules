{{- if .Values.deploy }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deploymentName }}
  namespace: {{ .Values.deploymentName }}
  labels:
    projectName: {{ .Values.deploymentName }}
    environment: {{ .Values.environment }}
    type: deployment
spec:
  replicas: {{ .Values.deploy.replicaCount }}
  selector:
    matchLabels:
      projectName: {{ .Values.deploymentName }}
      environment: {{ .Values.environment }}
      type: deployment
  strategy:
    type: {{ .Values.deploy.strategy }}
    rollingUpdate:
      maxUnavailable: {{ .Values.deploy.maxUnavail }}
      maxSurge: {{ .Values.deploy.maxSurge }}
  template:
    metadata:
      labels:
        projectName: {{ .Values.deploymentName }}
        environment: {{ .Values.environment }}
        type: deployment
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: project
                  operator: In
                  values:
                  - {{ .Values.deploymentName }}
                - key: env
                  operator: In
                  values:
                  - {{ .Values.environment }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
      {{- if .Values.image.registryCredentials }}
      imagePullSecrets:
        - name: {{ .Values.deploymentName }}-docker-registry
      {{- end }}
      containers:
        - name: {{ .Values.deploymentName }}
          {{- if .Values.image.repository }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- else }}
          image: "gcr.io/{{ .Values.project }}/{{ .Values.deploymentName }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          {{- range  $port := .Values.ports }}
            - name: {{$port.name}}
              containerPort: {{$port.containerPort}}
              protocol: {{$port.protocol}}
          {{- end}}
          {{- if .Values.ports -}}
          {{- if (index $.Values.ports 0).healthcheck }}
          livenessProbe:
            httpGet:
              path: {{(index $.Values.ports 0).healthcheck}}
              port: {{(index $.Values.ports 0).containerPort}}
              scheme: HTTP
            failureThreshold: {{ .Values.deploy.healthCheck.liveFailThreshold }}
            successThreshold: {{ .Values.deploy.healthCheck.liveSuccThreshold }}
            initialDelaySeconds: {{ .Values.deploy.healthCheck.delay }}
            periodSeconds: {{ .Values.deploy.healthCheck.period }}
            timeoutSeconds: {{ .Values.deploy.healthCheck.timeout }}
          readinessProbe:
            httpGet:
              path: {{(index $.Values.ports 0).healthcheck}}
              port: {{(index $.Values.ports 0).containerPort}}
              scheme: HTTP
            failureThreshold: {{ $.Values.deploy.healthCheck.readFailThreshold }}
            successThreshold: {{ $.Values.deploy.healthCheck.readSuccThreshold }}
            initialDelaySeconds: {{ $.Values.deploy.healthCheck.delay }}
            periodSeconds: {{ $.Values.deploy.healthCheck.period }}
            timeoutSeconds: {{ $.Values.deploy.healthCheck.timeout }}
          {{- end}}
          {{- end}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ .Values.deploymentName }}-configmap
            {{- if .Values.secrets }}
            - secretRef:
                name: {{ $.Values.deploymentName }}-secret-env
            {{- end}}
          env:
            {{- range .Values.env }}
          - name: {{ .name }}
            value: {{ .value | quote }}
          {{- end }}
          volumeMounts:
          {{- range  $index,$artifact := .Values.artifacts }}
            - name: {{ $.Values.deploymentName }}-volume-{{$index}}
              mountPath: {{ $artifact.mountPath }}
          {{- end}}
        {{- if  .Values.lifecycle.prestop.command }}        
          lifecycle:
            preStop:
              exec:
                command: {{ .Values.lifecycle.prestop.command }}
        {{- end }}
      {{- if .Values.serviceAccount }}
      serviceAccount: {{ .Values.deploymentName }}-ksa
      serviceAccountName: {{ .Values.deploymentName }}-ksa
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.deploy.terminationGracePeriodSeconds }}
      volumes:
        {{- range  $index,$artifact := .Values.artifacts }}
        - name: {{ $.Values.deploymentName }}-volume-{{$index}}
          secret:
            secretName: {{ $.Values.deploymentName }}-secret-{{$index}}
        {{- end}}
{{- end}}
