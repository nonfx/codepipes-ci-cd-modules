provisioner: gcp
name: terraform
version: 1
revision: 1
displayName: Terraform pipeline
description: Executes Terraform commands on code from external repository
target: ""
keywords:
  - terraform
author: Ollion
meta: {}
inputs:
  properties:
    artifact_bucket:
      title: Artifact Bucket
      description: Name of the bucket to store Terraform artifacts.
      type: string
      pattern: "[a-z0-9\\-_.]{3,63}" # see: https://cloud.google.com/storage/docs/naming-buckets
    artifact_dir:
      title: Artifact Directory
      description: Name of the root directory in the artifact bucket.
      type: string
    iac_checkout_src:
      title: IaC Source Repository URL
      description: Path to Git repository with IaC code.
      type: string
    iac_checkout_target:
      title: IaC Source Revision Identifier
      description: Git branch, tag or commit hash to checkout.
      type: string
    iac_root:
      title: IaC Root Directory
      description: Relative path to the infrastructure code.
      type: string
      default: .
    tf_action:
      title: Terraform Action
      description: Terraform action to be performed (e.g plan, apply, destroy).
      type: string
      enum:
        - plan
        - plan-destroy
        - apply
        - destroy
    tf_plan_file:
      title: Terraform Plan File
      description: Name of the plan file artifact.
      type: string
      default: terraform.tfplan
    tf_state_file:
      title: Terraform State File
      description: Name of the state file artifact.
      type: string
      default: terraform.tfstate
    tf_version:
      title: Terraform Version
      description: Version of Terraform to be used to deploy the infrastructure.
      type: string
      default: 1.3.6
    tf_log_level:
      title: Terraform Log Level
      description: Terraform log verbosity.
      type: string
      enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - JSON
      default: DEBUG
    iac_src_dir:
      title: IaC Source Directory
      description: Path to locally generated IaC code (iac_checkout_* options will be ignored).
      type: string
  required:
    - iac_checkout_src
    - iac_checkout_target
    - artifact_bucket
    - artifact_dir
    - tf_action
  internal:
    - iac_checkout_src
    - iac_checkout_target
    - iac_root
    - artifact_bucket
    - artifact_dir
    - tf_action
    - tf_state_file
    - tf_plan_file
    - tf_version
    - iac_src_dir
template: |
  {% set artifact_root_path = artifact_bucket|add:"/"|add:artifact_dir %}     {# <artifact_bucket>/<artifact_dir> #}
  {% set artifact_build_path = artifact_root_path|add:"/"|add:"$BUILD_ID" %}  {# <artifact_bucket>/<artifact_dir>/<build_id> #}
  {% set local_error_sentinel_path = '/workspace/_fail' %}
  {% set local_checkout_path = '/workspace/code' %}
  {% set local_code_path = local_checkout_path|add:"/"|add:iac_root %}
  {% set local_artifact_path = '/workspace/artifacts' %}
  {% set tf_plan_json_file = tf_plan_file|add:".json" %}                      {# <tf_plan_file>.json #}
  {% set tf_var_name_prefix = 'VG_TF_VAR_' %}
  {% set tf_var_file_path = '/workspace/vg_tf_var_values.tfvars' %}
  {% set tf_var_name_dash_placeholder = '___' %}

  {# redirects shell command output to a log file #}
  {% macro logger(name, stdout=true) %}
  {{ local_artifact_path }}/{{ get_log_name(name) }} {% if stdout %}2>&1{% endif %}
  {% endmacro %}

  {# generates a standard log name from action and name suffix #}
  {% macro get_log_name(suffix) %}{{ tf_action }}_terraform_{{ suffix }}.log{% endmacro %}

  {# uploads a log file generated by the logger, does not fail on error #}
  {% macro upload_log(name) %}
  {{ upload_artifact(get_log_name(name), true) }}
  {% endmacro %}

  {# uploads a file artifact, by default fail on error #}
  {% macro upload_artifact(file, ignore_err=false) %}
  - id: 'upload {{ file }}'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: sh
    args:
      - -c
      - 'gsutil -q cp {{ local_artifact_path }}/{{ file }} gs://{{ artifact_build_path }}/{{ file }} || {{ ignore_err|yesno:"true,false" }}'
  {% endmacro %}

  {# shell command to set a sentinel file signaling failure #}
  {% macro set_fail_flag(operation) %}echo "{{ operation }}" > {{ local_error_sentinel_path }}{% endmacro %}

  {# causes the pipeline to fail if fail flag was set #}
  {% macro fail_on_flag() %}
  - id: 'assert success {% now '20060102150405.000000' %}'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: bash
    args:
      - -c
      - '! test -f {{ local_error_sentinel_path }} || (echo "Following operation has failed: $(cat {{ local_error_sentinel_path }})"; exit 1)'
  {% endmacro %}

  ########################################################################################################################################################
  # All artifacts generated by invocation of this pipeline will be copied to 'gs://{{ artifact_build_path }}'.                                           #
  # The plan action produces binary {{ tf_plan_file }} and JSON {{ tf_plan_file }}.json execution plan files.                                            #
  # The apply and destroy actions produce binary {{ tf_state_file }} state file.                                                                         #
  # If generated the Terraform plan and Terraform state will be also copied to 'gs://{{ artifact_root_path }}'.                                          #
  # Deployment state file is always copied even if it may be only partially altered (e.g. apply, destroy failure).                                       #
  ########################################################################################################################################################

  options:
   env:
   - 'TF_IN_AUTOMATION=true'
   - 'TF_INPUT=false'
   - 'TF_LOG={{ tf_log_level }}'
  steps:
  - id: 'initialize workspace'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: sh
    args:
      - -c
      - 'mkdir -p {{ local_artifact_path }}'
  - id: 'download global state'
    # the state file is optional for plan and apply operations
    # the file will exist only after first successful apply operation
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: sh
    args:
      - -c
      - '! gsutil -q ls gs://{{ artifact_root_path }}/{{ tf_state_file }} || gsutil -q cp -n gs://{{ artifact_root_path }}/{{ tf_state_file }} {{ local_artifact_path }};'
  {% if iac_src_dir %}
  # use locally generated IaC
  {% set local_code_path='/workspace/'|add:iac_src_dir %}
  {% else %}
  - id: 'IaC source clone'
    name: 'gcr.io/cloud-builders/git'
    args:
      - clone
      - --no-checkout
      - '{{ iac_checkout_src }}'
      - '{{ local_checkout_path }}'
  - id: 'IaC revision checkout'
    name: 'gcr.io/cloud-builders/git'
    args:
      - checkout
      - '{{ iac_checkout_target }}'
    dir: {{ local_checkout_path }}
  {% endif %}
  - id: 'prepare terraform input values'
    # get all environment variables with '{{ tf_var_name_prefix }}' name prefix, remove the prefix,
    # replace all '{{ tf_var_name_dash_placeholder }}' placeholders with '-' and quote the value
    # save the result as input variable file for terraform commands
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: sh
    args:
      - -c
      - printenv | grep "^{{ tf_var_name_prefix }}*" | sed 's/^{{ tf_var_name_prefix }}//' | awk -F '=' -v OFS='=' '{ gsub("{{ tf_var_name_dash_placeholder }}", "-", $1); st = index($0,"="); val=substr($0,st+1); print $1, val ~ /^{.*?}$/ || val ~ /^\[.*?\]$/ ? val:"\""val"\"" }' > {{ tf_var_file_path }}
  - id: 'copy current terraform state'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: sh
    args:
      - -c
      - 'test ! -f "{{ local_artifact_path }}/{{ tf_state_file }}" || cp -f -v {{ local_artifact_path }}/{{ tf_state_file }} {{ local_code_path }}/{{ tf_state_file }} > {{ logger('init') }} || {{ set_fail_flag('terraform init') }}'
    dir: {{ local_code_path }}
  - id: 'terraform init'
    name: 'hashicorp/terraform:{{ tf_version }}'
    entrypoint: sh
    args:
      - -c
      - 'terraform init >> {{ logger('init') }} || {{ set_fail_flag('terraform init') }}'
    dir: {{ local_code_path }}
  {{ upload_log('init') }}
  {{ fail_on_flag() }}
  {% if tf_action == 'plan' || tf_action == 'plan-destroy' %}
  - id: 'terraform plan'
    name: 'hashicorp/terraform:{{ tf_version }}'
    entrypoint: sh
    args:
      - -c
      - 'terraform plan -var-file={{ tf_var_file_path }} {% if tf_action == 'plan-destroy' %}-destroy{% endif %} -out={{ local_artifact_path }}/{{ tf_plan_file }} -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('plan') }} || {{ set_fail_flag('terraform plan') }}'
    dir: {{ local_code_path }}
  - id: 'terraform show'
    name: 'hashicorp/terraform:{{ tf_version }}'
    entrypoint: sh
    args:
      - -c
      - 'terraform show -json {{ local_artifact_path }}/{{ tf_plan_file }} 1> {{ local_artifact_path }}/{{ tf_plan_json_file }} 2>> {{ logger('plan', false) }} || {{ set_fail_flag('terraform plan') }}'
    dir: {{ local_code_path }}
  {{ upload_log('plan') }}
  {{ fail_on_flag() }}
  {{ upload_artifact(tf_plan_file) }}
  {{ upload_artifact(tf_plan_json_file) }}
  {% elif tf_action == 'apply' %}
  - id: 'download global plan'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: sh
    args:
      - -c
      - 'gsutil -q cp gs://{{ artifact_root_path }}/{{ tf_plan_file }} {{ local_artifact_path }};'
  - id: 'terraform apply'
    name: 'hashicorp/terraform:{{ tf_version }}'
    entrypoint: sh
    args:
      - -c
      - 'terraform apply -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} {{ local_artifact_path }}/{{ tf_plan_file }} > {{ logger('apply') }} || {{ set_fail_flag('terraform apply') }}'
    dir: {{ local_code_path }}
  {{ upload_log('apply') }}
  {{ upload_artifact(tf_state_file) }}  {# upload the state even if the TF action failed as it may have already been modified #}
  {{ fail_on_flag() }}
  {% elif tf_action == 'destroy' %}
  - id: 'terraform destroy'
    name: 'hashicorp/terraform:{{ tf_version }}'
    entrypoint: sh
    args:
      - -c
      - 'terraform destroy -var-file={{ tf_var_file_path }} -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('destroy') }} || {{ set_fail_flag('terraform destroy') }}'
    dir: {{ local_code_path }}
  {{ upload_log('destroy') }}
  {{ upload_artifact(tf_state_file) }}  {# upload the state even if the TF action failed as it may have already been modified #}
  {{ fail_on_flag() }}
  {% endif %}
