provisioner: aws
name: terraform
version: 1
revision: 1
displayName: Terraform pipeline
description: Executes Terraform commands on code from external repository
target: ""
keywords:
  - terraform
author: Ollion
meta: {}
inputs:
  properties:
    artifact_bucket:
      title: Artifact Bucket
      description: Name of the bucket to store Terraform artifacts.
      type: string
      pattern: "[a-z0-9\\-.]{3,63}" # see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/BucketRestrictions.html
    artifact_dir:
      title: Artifact Directory
      description: Name of the root directory in the artifact bucket.
      type: string
    iac_checkout_src:
      title: IaC Source Repository URL
      description: Path to Git repository with IaC code.
      type: string
    iac_checkout_target:
      title: IaC Source Revision Identifier
      description: Git branch, tag or commit hash to checkout.
      type: string
    iac_root:
      title: IaC Root Directory
      description: Relative path to the infrastructure code.
      type: string
      default: .
    tf_action:
      title: Terraform Action
      description: Terraform action to be performed (e.g plan, apply, destroy).
      type: string
      enum:
        - plan
        - plan-destroy
        - apply
        - destroy
    tf_plan_file:
      title: Terraform Plan File
      description: Name of the plan file artifact.
      type: string
      default: terraform.tfplan
    tf_state_file:
      title: Terraform State File
      description: Name of the state file artifact.
      type: string
      default: terraform.tfstate
    tf_version:
      title: Terraform Version
      description: Version of Terraform to be used to deploy the infrastructure.
      type: string
      default: 1.3.6
    tf_log_level:
      title: Terraform Log Level
      description: Terraform log verbosity.
      type: string
      enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - JSON
      default: DEBUG
    iac_src_dir:
      title: IaC Source Directory
      description: Path to locally generated IaC code (iac_checkout_* options will be ignored).
      type: string
  required:
    - iac_checkout_src
    - iac_checkout_target
    - artifact_bucket
    - artifact_dir
    - tf_action
  internal:
    - iac_checkout_src
    - iac_checkout_target
    - iac_root
    - artifact_bucket
    - artifact_dir
    - tf_action
    - tf_state_file
    - tf_plan_file
    - tf_version
    - iac_src_dir
template: |
  {% set artifact_root_path = artifact_bucket|add:"/"|add:artifact_dir %}     {# <artifact_bucket>/<artifact_dir> #}
  {% set artifact_build_path = artifact_root_path|add:"/"|add:"$CODEBUILD_BUILD_ID" %}  {# <artifact_bucket>/<artifact_dir>/<build_id> #}
  {% set local_checkout_path = '$CODEBUILD_SRC_DIR/code' %}
  {% set local_code_path = local_checkout_path|add:"/"|add:iac_root %}
  {% set local_artifact_path = '$CODEBUILD_SRC_DIR/artifacts' %}
  {% set tf_plan_json_file = tf_plan_file|add:".json" %}                      {# <tf_plan_file>.json #}
  {% set tf_var_name_prefix = 'VG_TF_VAR_' %}
  {% set tf_var_file_path = '/tmp/vg_tf_var_values.tfvars' %}
  {% set tf_var_name_dash_placeholder = '___' %}
  {% set user_pre_script = "codepipes_init.sh" %}

  {# redirects shell command output to a log file #}
  {% macro logger(name, stdout=true) %}{{ local_artifact_path }}/{{ get_log_name(name) }} {% if stdout %}2>&1{% endif %}{% endmacro %}

  {# generates a standard log name from action and name suffix #}
  {% macro get_log_name(suffix) %}{{ tf_action }}_terraform_{{ suffix }}.log{% endmacro %}

  {# uploads a log file generated by the logger, does not fail on error #}
  {% macro upload_log_cmd(name) %}{{ upload_artifact_cmd(get_log_name(name), true) }}{% endmacro %}

  {# uploads a file artifact, by default fail on error #}
  {% macro upload_artifact_cmd(file, ignore_err=false) %}aws --color=off --output=json s3 cp --only-show-errors "{{ local_artifact_path }}/{{ file }}" "s3://{{ artifact_build_path }}/{{ file }}" || {{ ignore_err|yesno:"true,false" }}{% endmacro %}

  ########################################################################################################################################################
  # All artifacts generated by invocation of this pipeline will be copied to 'gs://{{ artifact_build_path }}'.                                           #
  # The plan action produces binary {{ tf_plan_file }} and JSON {{ tf_plan_file }}.json execution plan files.                                            #
  # The apply and destroy actions produce binary {{ tf_state_file }} state file.                                                                         #
  # If generated the Terraform plan and Terraform state will be also copied to 'gs://{{ artifact_root_path }}'.                                          #
  # Deployment state file is always copied even if it may be only partially altered (e.g. apply, destroy failure).                                       #
  ########################################################################################################################################################

  version: 0.2
  env:
    shell: '/bin/sh'
    variables:
      TF_IN_AUTOMATION: 'true'
      TF_INPUT: 'false'
      TF_LOG: '{{ tf_log_level }}'
  phases:
    install:
      commands:
        - cd "/tmp"
        - wget "https://releases.hashicorp.com/terraform/{{ tf_version }}/terraform_{{ tf_version }}_linux_amd64.zip"
        - unzip terraform_{{ tf_version }}_linux_amd64.zip -d /usr/bin
    pre_build:
      commands:
        # initialize workspace
        - mkdir -p "{{ local_artifact_path }}"
        # download global state
        # the state file is optional for plan and apply operations
        # the file will exist only after first successful apply operation
        - '! aws --color=off --output=json s3 ls "s3://{{ artifact_root_path }}/{{ tf_state_file }}" || aws --color=off --output=json s3 cp --only-show-errors "s3://{{ artifact_root_path }}/{{ tf_state_file }}" "{{ local_artifact_path }}"'
        {% if iac_src_dir %}
        # use locally generated IaC
        {% set local_code_path='$CODEBUILD_SRC_DIR/'|add:iac_src_dir %}
        {% else %}
        # IaC source clone
        - git clone --no-checkout "{{ iac_checkout_src }}" "{{ local_checkout_path }}"
        # IaC revision checkout
        - cd "{{ local_checkout_path }}"
        - git checkout "{{ iac_checkout_target }}"
        {% endif %}
        # prepare terraform input values
        # get all environment variables with '{{ tf_var_name_prefix }}' name prefix, remove the prefix,
        # replace all '{{ tf_var_name_dash_placeholder }}' placeholders with '-' and quote the value
        # save the result as input variable file for terraform commands
        - printenv | grep "^{{ tf_var_name_prefix }}*" | sed 's/^{{ tf_var_name_prefix }}//' | awk -F '=' -v OFS='=' '{ gsub("{{ tf_var_name_dash_placeholder }}", "-", $1); st = index($0,"="); val=substr($0,st+1); print $1, val ~ /^{.*?}$/ || val ~ /^\[.*?\]$/ ? val:"\""val"\"" }' > {{ tf_var_file_path }}
        - cd "{{ local_code_path }}"
        # run a pre script for user if user
        - if [ -f {{user_pre_script}} ] ; then chmod +x {{user_pre_script}} && ./{{user_pre_script}} ; fi
        # copy pre-existing terraform state to the working directory
        - test ! -f "{{ local_artifact_path }}/{{ tf_state_file }}" || cp -f -v {{ local_artifact_path }}/{{ tf_state_file }} {{ local_code_path }}/{{ tf_state_file }} > {{ logger('init') }}
        # terraform init
        - terraform init >> {{ logger('init') }}
      finally:
        - {{ upload_log_cmd('init') }}
    build:
      commands:
      {% if tf_action == 'plan' || tf_action == 'plan-destroy' %}
        # terraform plan
        - terraform plan -var-file={{ tf_var_file_path }} {% if tf_action == 'plan-destroy' %}-destroy{% endif %} -out={{ local_artifact_path }}/{{ tf_plan_file }} -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('plan') }}
        # terraform show
        - terraform show -json {{ local_artifact_path }}/{{ tf_plan_file }} 1> {{ local_artifact_path }}/{{ tf_plan_json_file }} 2>> {{ logger('plan', false) }}
      finally:
        - {{ upload_log_cmd('plan') }}
        - {{ upload_artifact_cmd(tf_plan_file) }}
        - {{ upload_artifact_cmd(tf_plan_json_file) }}
      {% elif tf_action == 'apply' %}
        # download global plan
        - aws --color=off --output=json s3 cp --only-show-errors "s3://{{ artifact_root_path }}/{{ tf_plan_file }}" "{{ local_artifact_path }}"
        # terraform apply
        - terraform apply -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} {{ local_artifact_path }}/{{ tf_plan_file }} > {{ logger('apply') }}
      finally:
        - {{ upload_log_cmd('apply') }}
        - {{ upload_artifact_cmd(tf_state_file) }}  {# upload the state even if the TF action failed as it may have already been modified #}
      {% elif tf_action == 'destroy' %}
        # terraform destroy
        - terraform destroy -var-file={{ tf_var_file_path }} -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('destroy') }}
      finally:
        - {{ upload_log_cmd('destroy') }}
        - {{ upload_artifact_cmd(tf_state_file) }}  {# upload the state even if the TF action failed as it may have already been modified #}
      {% endif %}
