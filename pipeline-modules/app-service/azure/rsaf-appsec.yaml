provisioner: azure
name: rsaf-appsec
version: 1
revision: 1
displayName: RSAF security scanning module
description: RSAF best practice applcation security scanning
target: ""
category: scan
keywords:
  - Pulish
  - Build
  - Scan
author: CloudCover
meta: {}
inputs:
  properties:
    git_local_path:
      title: Local Clone Directory
      description: The name of a new directory to clone into.
      type: string
      default: repo
    applicationName:
      title: Application name
      description: Codepipes application name
      type: string
    pool_name:
      title: Pool Name
      description: Use selfhosted agent by proving agent pool name.
      type: string
      default: "AppSec Pool"
    fortify_application_id:
      title: Fortify application id
      description: Fortify application identifier
      type: string
      default: ""
    nexus_application_id:
      title: Nexus Application ID
      description: Use selfhosted agent by proving agent pool name.
      type: string
      default: ""
    working_dir:
      title: Code Directory Path
      description: Directory Path where the code is located.
      type: string
  internal:
    - git_local_path
    - working_dir
    - applicationName
template: |
  {% set scancentral = '/home/azureuser/client/bin/scancentral' %}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  steps:
    - task: UseDotNet@2
      displayName: 'Use DotNet 3.x'
      inputs:
        version: 3.x
        includePreviewVersions: true
    - task: UseDotNet@2
      displayName: 'Use DotNet 6.x'
      inputs:
        version: 6.x
        includePreviewVersions: true
    - script: |
          cd {{working_dir}}
          dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/publish_output
    - task: ArchiveFiles@2
      displayName: "Archive files"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
        includeRootFolder: false
        archiveFile: "$(System.DefaultWorkingDirectory)/{{applicationName}}.zip"
    - task: NexusIqPipelineTask@1
      inputs:
        nexusIqService: $(CPI__nexus_service_connection)
        organizationId: $(CPI__nexus_organization_id)
        applicationId: {% if nexus_application_id %} {{ nexus_application_id }}{% else %}{{ applicationName }}{% endif %}
        stage: 'Build'
        scanTargets: $(System.DefaultWorkingDirectory)/{{applicationName}}.zip
    - script: |
        # because sonar needs the base branch fetched for comparison
        git fetch --all
      displayName: 'Git fetch base'
      workingDirectory: {{ git_local_path }}
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: $(CPI__sonar_qube_service_connection)
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: $(CPI__sonar_qube_project_key)
        cliSources: {{working_dir}}
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5
    - script: |
          scanToken=$({{scancentral}} -url $(CPI__SCAN_CONTROLLER_URL) start -bt none -upload -application {% if fortify_application_id %} {{ fortify_application_id }}{% else %}{{ applicationName }}{% endif %} -version 1.0 -b $(Build.BuildId) -uptoken $(CPI__UP_TOKEN) -bf *.csproj)
          token=$( echo $scanToken |  grep -Eo 'token: [a-zA-Z0-9-]+' | cut -d' ' -f2)
          {{scancentral}} -url $(CPI__SCAN_CONTROLLER_URL) retrieve -block -f worker.fpr -token $token
          curl -X POST "$(CPI__SSC_ASSETS_URL)" -H "accept: application/json" -H "Authorization: FortifyToken $(CPI__FORTIFY_TOKEN)" -H "Content-Type: multipart/form-data" -F "file=@worker.fpr"
          curl -k -X GET "$(CPI__SSC_URL)" -H "accept: application/json" -H "Authorization: FortifyToken $(CPI__FORTIFY_TOKEN)" > $(Build.BinariesDirectory)/out/output.log
          cat $(Build.BinariesDirectory)/out/output.log
          critical_count=$(cat $(Build.BinariesDirectory)/out/output.log | jq '.data[].friority' | grep "Critical" | wc -l)
          if [ $critical_count -gt 0 ]; then
            # Print an error message andset pipeline fail variable
            echo "Error: There are 'critical' severity vulnerabilities in the code."
            failPipeline=true
          fi
          high_count=$(cat $(Build.BinariesDirectory)/out/output.log | jq '.data[].friority' | grep "High" | wc -l)
          if [ $high_count -gt 0 ]; then
            # Print an error message and set pipeline fail variable
            echo "Error: There are 'high' severity vulnerabilities in the code.."
            failPipeline=true
          fi
          # Check if the pipeline fail variable is true
          if [ $failPipeline = true ]; then
              echo "There are $critical_count Critical and $high_count High Vulnerabilites. Therefore, failing the Build. Please fix the vulnerability and run the build again. "
              exit 124
          fi
    - task: UniversalPackages@0
      inputs:
        command: 'publish'
        publishDirectory: '$(System.DefaultWorkingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '$(CPI__artifact_feed)'
        vstsFeedPackagePublish: '{{applicationName}}.zip'
        packagePublishDescription: '$(sha_tag)'
        versionOption: 'minor'
        publishedPackageVar: 'codepipes'