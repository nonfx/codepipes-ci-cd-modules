provisioner: azure
name: azure-functions-code
version: 1
revision: 1
displayName: "Azure functions deployment with code"
description: "Deploy Azure functions"
target: "deployment-template"
keywords: ["serverless","functions"]
author: "CloudCover"
meta:
  inputArtifactType:
    - GitCode
inputs:
  type: object
  properties:
    app_env:
      title: Application Environment
      description: Application environment variables
      type: object
      default: {}
    applicationName:
      title: Application name
      description: A Code Pipes application name
      type: string
      default: latest
    environment:
      title: Environment Name
      description: A Code Pipes environment name
      type: string
      default: dev
    repo_dir:
      title: Repo Dir
      description:  Repo Dir
      type: string
    function_app_name:
      title: Function App Name
      description: Function App Name, to link this variable to a terraform output use this syntax ${terraform.func_name.value} where func_name is output variable key.
      type: string
      tfOutputRegex: "^func"
    pool_name:
      title: Pool Name
      description: Use selfhosted agent by proving agent pool name.
      type: string
      default: ""
    job_type:
      title: Job Type
      description: This is to deploy or undeploy application
      type: string
      default: deploy   
  required: ["function_app_name"]
  internal:
    - app_env
    - applicationName
    - environment
    - job_type
    - repo_dir
template: |
  {% set workspace = '$BUILD_SOURCESDIRECTORY' %}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  {% set source_code_path = workspace|add:'/source_code' %}
  steps:
  - script: |
        cat {{pipeline_env_file}} | while IFS= read -r line; do
            value=${line#*=}
            name=${line%%=*}
            echo "-$name $value " >> config.txt
        done;
        config_var="$(cat config.txt | tr -d '\n')"
        echo "##vso[task.setvariable variable=config_map]$config_var"
        cd {{source_code_path}}/{{repo_dir}}
        git log --format="%H" -n 1
        sha_tag=$(git log --format="%H" -n 1);
        echo "##vso[task.setvariable variable=sha_tag]$sha_tag"
  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: '$(System.DefaultWorkingDirectory)'
      feedsToUse: 'internal'
      vstsFeed: '$(CPI__artifact_feed)'
      vstsFeedPackage: '{{applicationName}}.zip'
      vstsPackageVersion: '*'
      publishedPackageVar: 'codepipes'
  {% if job_type == 'deploy' %}
  - task: AzureFunctionApp@1
    displayName: 'Deploy azure func'
    inputs:
      azureSubscription: $(CPI__azure_subscription)
      appType: functionApp
      appName: {{ function_app_name }}
      package: $(System.DefaultWorkingDirectory)/{{applicationName}}.zip
      appSettings: '$(CONFIG_MAP)'
  {% else %}
  - script: |
        echo "Please delete the function from the Class and redeploy" 
  {% endif %}


