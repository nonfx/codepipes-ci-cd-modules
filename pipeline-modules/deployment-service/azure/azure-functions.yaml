provisioner: azure
name: azure-functions-deploy
version: 1
revision: 1
displayName: "Azure functions deployment with code"
description: "Deploy Azure functions"
target: "deployment-template"
keywords: ["serverless","functions"]
author: CloudCover
meta:
  inputArtifactType:
    - GitCode 
inputs:
  type: object
  properties:
    app_env:
      title: Application Environment
      description: Application environment variables
      type: object
      default: {}
    applicationName:
      title: Application name
      description: A Code Pipes application name
      type: string
      default: latest
    environment:
      title: Environment Name
      description: A Code Pipes environment name
      type: string
      default: dev
    repo_dir:
      title: Repo Dir
      description:  Repo Dir
      type: string
    function_app_name:
      title: Function App Name
      description: Function App Name, to link this variable to a terraform output use this syntax ${terraform.func_name.value} where func_name is output variable key.
      type: string
      tfOutputRegex: "^func"
    pool_name:
      title: Pool Name
      description: Use selfhosted agent by proving agent pool name.
      type: string
      default: ""
    job_type:
      title: Job Type
      description: This is to deploy or undeploy application
      type: string
      default: deploy       
    FeedName:
      title: Artifact Feed Name
      description: Azure devops Artifact Feed name where App artifact will download 
      type: string    
    ServiceConnectionString:
      title: Service Connection String Name
      description: Service Connection Name which created on Azure devops
      type: string                        
  
  required: 
    - function_app_name
    - FeedName
    - ServiceConnectionString
  internal:
    - app_env
    - applicationName
    - environment
    - job_type
    - repo_dir
template: |
  {% set workspace = '$(Build.SourcesDirectory)' %}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  {% set source_code_path = workspace|add:'/source_code' %}
  steps:
  - script: |
        cat {{pipeline_env_file}} | while IFS= read -r line; do
            value=${line#*=}
            name=${line%%=*}
            echo "-$name $value " >> config.txt
        done;
        config_var="$(cat config.txt | tr -d '\n')"
        echo "##vso[task.setvariable variable=config_map]$config_var"
        cd {{source_code_path}}/{{repo_dir}}
        ls -la
        git log --format="%H" -n 1
        export sha_tag=$(git log --format="%H" -n 1);
        echo "##vso[task.setvariable variable=sha_tag]$sha_tag"
        mkdir azure-functions-code

  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: '$(System.DefaultWorkingDirectory)/azure-functions-code'
      feedsToUse: 'internal'
      vstsFeed: '{{FeedName}}'
      vstsFeedPackage: '{{applicationName}}-$(sha_tag).zip'
      vstsPackageVersion: '*'
      publishedPackageVar: 'codepipes'
      extract: false

  - task: ArchiveFiles@2
    displayName: "Archive files"
    inputs:
      rootFolderOrFile: "$(System.DefaultWorkingDirectory)/azure-functions-code"
      includeRootFolder: false
      archiveFile: "$(System.DefaultWorkingDirectory)/{{applicationName}}-$(sha_tag).zip"
  
  - script: |
        echo 'List the file'
        cd '$(System.DefaultWorkingDirectory)/azure-functions-code' && ls -la     
        echo 'list zip file'
        cd $(System.DefaultWorkingDirectory)
        ls -la
              
  {% if job_type == 'deploy' %}
  - task: AzureFunctionApp@1
    displayName: 'Deploy Azure function'
    inputs:
      azureSubscription: {{ServiceConnectionString}}
      appType: functionApp
      appName: {{ function_app_name }}
      package: "$(System.DefaultWorkingDirectory)/{{applicationName}}-$(sha_tag).zip"
      appSettings: '$(CONFIG_MAP)'
  {% else %}
  - script: |
        echo "Please delete the function from the Class and redeploy" 
  {% endif %}



