provisioner: gcp
name: basic-gke-regional
version: 1
revision: 1
displayName: GKE deployment
description: The bash script to run
target: "deployment-template"
keywords:
  - bash
  - linux
author: CloudCover
meta:
  inputArtifactType:
    - ContainerImage
  requiredResources:
    - google_container_cluster
inputs:
  properties:
    app_env:
      title: Application Environment
      description: Application Related Envs
      type: object
      default: {}
    applicationName:
      title: Application name
      description: This is vanguard application name
      type: string
      default: latest
    cluster:
      title: Cluster Name
      description: Cluster name in which deployment will happen
      type: string
    customer_bucket:
      title: Customer Bucket Name
      description: This is a vanguard Customer  bucket name
      type: string
      default: latest
    environment:
      title: Environment Name
      description: This is vanguard environment name
      type: string
      default: latest
    files:
      title: Files
      description: Files mounted in container
      type: object
      default: {}
    job_type:
      title: Job Type
      description: This is to deploy or undeploy application
      type: string
      default: deploy
    ports:
      title: Ports
      description: Port used in services
      type: array
      default: []
      items:
        type: object
        required: [name, containerPort]
        properties:
          containerPort:
            title: Container port
            type: integer
            maximum: 65535
          healthCheck:
            title: Health check path
            type: string
            default: ""
          name:
            title: Service name
            type: string
          protocol:
            title: Protocol
            type: string
            default: TCP
            enum:
              - TCP
              - UDP
    project:
      title: Project Name
      description: This is a vanguard project name
      type: string
      default: latest
    region:
      title: Region name
      description: region name for cluster
      type: string
    repository:
      title: Container Repository
      description: Enter Full container url without tag
      type: string
      default: ""
    tag:
      title: Container tag
      description: Tagged container will deploy
      type: string
      default: latest
    deployment_timeout:
      title: Deployment Timeout
      description: Time to wait for pods to be ready before terming deployment as unsuccessful
      type: string
      default: 300s
  required:
    - cluster
    - region
  internal:
    - app_env
    - files
    - repository
    - tag
    - applicationName
    - environment
    - project
    - customer_bucket
    - job_type

template: |
  {% set workspace = '/workspace' %}   {# has to be a persistent volume #}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  {% set pipeline_secret_file = workspace|add:'/.secret.env' %}
  {% set pipeline_modules_path = workspace|add:'/pipeline_modules' %}
  {% set helm_chart_path = pipeline_modules_path|add:"/helm/gcp/basic-gke" %}
  {% set common_scripts_path = pipeline_modules_path|add:'/assets/scripts' %}


  steps:
  - id: 'gcloud container setup'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud container clusters get-credentials {{cluster}} --region {{region}}
  - id: 'Install helm'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      git clone https://github.com/GoogleCloudPlatform/cloud-builders-community.git;
      cd cloud-builders-community/helm;
      docker build -t gcr.io/$PROJECT_ID/helm:latest . ;
  {% if job_type == 'deploy' %}
  - id: 'Setup helm values'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      export PATH="{{workspace}}/bin:$$PATH";    
      {{ common_scripts_path }}/install-jq.sh
      
      cd {{helm_chart_path}} ;

      touch .helmignore;
      {% if files %}
      {% for mounthPath, fs in files %}
      {% if fs %}
      {% for file in fs %}
      gsutil cp gs://{{customer_bucket}}/{{file}} . ;
      openssl aes-256-cbc -md sha256 -pbkdf2 -d -in {{file}} -out {{file}} -k $$vg_pipeline_artifact_aes_key
      {% endfor %}
      {% endif %}
      {% endfor %}
      gsutil rm -r gs://{{customer_bucket}} ;
      {% endif %}
      rm -f values.yaml;

      if [ -z "$docker_registry" ]; then
      export docker_registry="index.docker.io"
      fi

      echo "applicationName: {{applicationName}} #auto
      environment:  {{environment}} #auto
      project: {{project}} #auto
      deploy:
        replicaCount: 1
        strategy: RollingUpdate
        maxUnavail: 1
        maxSurge: 1
        terminationGracePeriodSeconds: 30
        healthCheck:
          liveFailThreshold: '2'
          liveSuccThreshold: '1'
          readFailThreshold: '2'
          readSuccThreshold: '1'
          delay: '10'
          period: '4'
          timeout: '2'
      ports:
      {% for port in ports%}
        - name: {{port.name}}
          containerPort: {{port.containerPort}}
          protocol: {{port.protocol}}
          {% if port.healthCheck %}
          healthcheck: {{port.healthCheck}}
          {% endif %}
      {% endfor %}
      image: #auto
        repository: {{ repository }}
        pullPolicy: Always
        tag:  {{ tag }}
        registryCredentials:
          registry: $$docker_registry
          username: $$docker_username" >> values.yaml

      printf '    password: %s\n' "$(printf '%s' "$$docker_password" | jq -aRs .)" >> values.yaml
      echo "
      service:
        type: nodeport
        private: false
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 80
      resourcequota:
        quotaRequestsCpu: 100
        quotaRequestsMem: 0.2
        quotaLimitsCpu: 200
        quotaLimitsMem: 0.3
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      lifecycle:
        prestop:
          command: ['/bin/sh', '-c', 'sleep 30']
      artifacts:
      {% for mountPath, fs in files %}
        - mountPath: {{mountPath}}
          files:
          {% for file in fs %}
            - '{{file}}'
          {% endfor %}
      {% endfor %}
      envs:" >> values.yaml;
      cat {{pipeline_env_file}} | while IFS= read -r line; do
      value=${line#*=}
      name=${line%%=*}
      printf '  %s: %s\n' $name "$value" >> values.yaml
      done;
      echo "secrets:" >> values.yaml;
      cat {{pipeline_secret_file}} | while IFS= read -r line; do
      value=${line#*=}
      name=${line%%=*}
      printf '  %s: %s\n' $name $value >> values.yaml
      done;
  - id: 'Install Application'
    name: 'gcr.io/$PROJECT_ID/helm'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      cd {{helm_chart_path}} ;
      helm upgrade --install -f values.yaml {{applicationName}}-{{environment}} . --atomic --timeout {{deployment_timeout}}
      kubectl rollout restart deployment {{applicationName}}-deployment -n {{applicationName}}
      kubectl rollout status deployment {{applicationName}}-deployment   -n {{applicationName}}
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      
      export PATH={{common_scripts_path}}:{{workspace}}/bin:$$PATH
      summary=$(retry.sh "kubectl get ingress -n {{applicationName}} -o=jsonpath={.items[*].status.loadBalancer.ingress[*].ip}" 30 2)
      if [ ! -z "$summary" ]; then
        outputs.sh add "Service URL" "http://$summary"
      fi
  {% else %}
  - id: 'Uninstall application'
    name: 'gcr.io/$PROJECT_ID/helm'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      cd {{helm_chart_path}} ;
      helm list;
      helm uninstall {{applicationName}}-{{environment}};
  {% endif %}
