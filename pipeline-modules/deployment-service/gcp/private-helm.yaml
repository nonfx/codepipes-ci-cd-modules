provisioner: gcp
name: private-helm
version: 1
revision: 1
displayName: Deploy a private helm chart setup in k8s using git repo
description: The template is used for deploying a helm chart in kubernetes cluster
target: "deployment-template"
keywords:
  - helm
  - private
author: Ollion
meta:
  inputArtifactType:
    - GitCode
inputs:
  properties:
    app_env:
      title: Application Environment
      description: Application Related Envs
      type: object
      default: {}
    environment:
      title: Environment Name
      description: This is vanguard environment name
      type: string
      default: latest
    applicationName:
      title: Application name
      description: This is vanguard application name
      type: string
      default: latest
    cluster:
      title: Cluster Name
      description: Cluster name in which deployment will happen
      type: string
    namespace:
      title: namespace
      description: K8s namespace to deploy
      type: string
      default: "default"
    region:
      title: Region name
      description: region name for cluster
      type: string
    job_type:
      title: Job Type
      description: This is to deploy or undeploy application
      type: string
      default: deploy
    deployment_timeout:
      title: Deployment Timeout
      description: Time to wait for pods to be ready before terming deployment as unsuccessful
      type: string
      default: 300s
    helm_chart_path:
      title: Helm Chart Path
      description: Path to your helm chart
      type: string
    helm_values_path:
      title: Helm Chart Values Path
      description: Path to your helm chart values including values file name
      type: string
    helm_values_set_var:
      title: Helm Set Values [ Optional ]
      description: "Optional : Key1=Value1,Key2=Value , which override the value inside values.yaml"
      type: string
      default: ""
    helm_release_name:
      title: Helm Release Name [ Optional ]
      description: "Optional Parameter: You can specify the Helm release name if desired. If left empty, it will be automatically generated."
      type: string
      default: ""
    rollback_enable:
      title: Enable Automatic Rollback
      description: Enabling this option will automatically trigger a rollback of the Helm release in case of deployment failure during the previous deployment.
      type: boolean
      default: true            

  required:
    - cluster
    - region
    - helm_values_path
    - helm_chart_path
  internal:
    - app_env
    - applicationName
    - environment
    - project
    - job_type

template: |
  {% set workspace = '/workspace' %}   {# has to be a persistent volume #}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  {% set pipeline_secret_file = workspace|add:'/.secret.env' %}
  {% set pipeline_modules_path = workspace|add:'/pipeline_modules' %}
  {% set source_code_path = workspace|add:'/source_code' %}
  {% set service_name = applicationName|add:"-"|add:environment|cpi_trimlength:40|cpi_replacespecial %}

  steps:
  - id: 'gcloud container setup'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud container clusters get-credentials {{cluster}} --region {{region}}
  {% if job_type == 'deploy' %}
  - id: 'Install Application'
    name: 'cldcvr/cpi-helm'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      {% if namespace != 'default' %}
      kubectl create ns {{namespace}}
      {% endif %}
      cd {{source_code_path}}/{{helm_chart_path}} ;
      {%- if helm_values_path != '' %}
      cp {{source_code_path}}/{{helm_values_path}} values_presub.yml
      cat values_presub.yml | envsubst > {{source_code_path}}/{{helm_values_path}}
      rm -f values_presub.yml
      {%- endif %}
      helm upgrade --install -f {{source_code_path}}/{{helm_values_path}}   {% if helm_release_name != "" %} {{ helm_release_name }} {% else %} {{ service_name }} {% endif %} . --wait --timeout {{deployment_timeout}} --namespace {{namespace}} {% if helm_values_set_var != "" %} --set {{helm_values_set_var}}  {% endif %}
      {% if rollback_enable %}
      #Get Status code
      helm_upgrade_exit_status=$?
      echo 'Helm release status of EXIT_CODE: '$helm_upgrade_exit_status''
      # Check the Helm upgrade/install status
      if [ $helm_upgrade_exit_status -eq 0 ]; then
        echo "Helm upgrade/install successful...."
      else
        # Helm upgrade/install failed
        echo "Helm upgrade/install failed. Rolling back pervious version..."
        
        # Perform the Helm rollback
        helm  rollback  {% if helm_release_name != "" %} {{ helm_release_name }} {% else %} {{ service_name }} {% endif %}  0 --wait --timeout {{deployment_timeout}}
        if [ $? -eq 0 ]; then
          echo "Helm Rollback completed..."
          echo "Action Required: Check your deployment  on k8s cluster why it Rollbacked"
          # Exit with a non-zero status code to indicate pipeline failure
          exit 1
        else
          echo "Helm Rollback also failed ..."
          exit 1
        fi
      fi
    {% endif %}
  {% else %}
  - id: 'Uninstall application'
    name: 'cldcvr/cpi-helm'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      cd {{source_code_path}}/{{helm_chart_path}} ;
      helm uninstall {% if helm_release_name != "" %} {{ helm_release_name }} {% else %} {{ service_name }} {% endif %} --namespace {{namespace}};
  {% endif %}
