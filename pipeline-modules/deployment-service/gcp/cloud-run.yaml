provisioner: gcp
name: cloud-run
version: 1
revision: 1
displayName: Cloud Run Deployment
description: Deploy cloud run on GCP
target: "deployment-template"
keywords:
  - bash
  - linux
author: CloudCover
meta:
  inputArtifactType:
    - ContainerImage
inputs:
  properties:
    applicationName:
      title: Application name
      description: This is vanguard application name
      type: string
      default: latest
    environment:
      title: Environment Name
      description: This is vanguard environment name
      type: string
      default: latest
    project:
      title: Project Name
      description: This is a vanguard project name
      type: string
      default: latest
    region:
      title: Region name
      description: region name for cluster
      type: string
    repository:
      title: Container Repository
      description: Enter Full container url without tag
      type: string
      default: ""
    tag:
      title: Container tag
      description: Tagged container will deploy
      type: string
      default: latest
    allowUnauthenticated:
      title: Allow Unauthenticated
      description: Boolean to allow Unauthenticated traffic
      type: boolean
      default: true
    domain:
      title: Custom Domain
      description: Creates a domain mapping provided the domain has been already verified with the GCP project
      type: string
      default: ""
    containerPort:
      title: Container Port
      description: Requests will be sent to the container on this port, default is 8080
      type: integer
      default: 8080
    job_type:
      title: Job Type
      description: This is to deploy or undeploy application
      type: string
      default: deploy
    vpcConnector:
      title: VPC Connector
      description: Name of the VPC Connector
      type: string
      default: ""
    maxInstances:
      title: Max Instances
      description: Maximum number of instances for the service.
      type: integer
      default: 100
    concurrency:
      title: Concurrency
      description: Number of concurrent requests to be processed per instance.
      type: integer
      default: 80
      maximum: 1000
    minInstances:
      title: Min Instances
      description: Minimum number of instances for the service.
      type: integer
      default: 0
    useCDN:
      title: Use Cloud CDN
      description: Use Cloud CDN for the service.
      type: boolean
      default: false
  required:
    - region
  internal:
    - applicationName
    - environment
    - project
    - repository
    - tag
    - job_type
template: |
  ########################################################################################################################################################
  # Switch the gcloud credentials with the service account provided by user.                                                                             #
  # The module creates knative config yaml to create cloud run instance,                                                                                 #
  # Additionally it has been provided with policy config to control ingress traffic                                                                      #
  # The module recieves a formatted list of pipeline env in {{ pipeline_env_file }},                                                                     #
  # So we don't have to worry about character escaping in this module.                                                                                   #
  ########################################################################################################################################################

  {% set workspace = '/workspace' %}   {# has to be a persistent volume #}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  {% set pipeline_secret_file = workspace|add:'/.secret.env' %}
  {% set fmt_app_name = applicationName | lower | cpi_replacespecial | cpi_trimlength:63 %}
  {% set pipeline_modules_path = workspace|add:'/pipeline_modules' %}
  {% set common_scripts_path = pipeline_modules_path|add:'/assets/scripts' %}
  {% set fmt_env_name = environment | cpi_replacespecial %}
  {% set fmt_proj = project | cpi_replacespecial %}

  steps:
  {% if job_type == 'deploy' %}
  - id: 'Add secrets to secret manager'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      export PATH={{common_scripts_path}}:{{workspace}}/bin:$$PATH
      env.sh all --secrets | while IFS= read -r line; do
        # non-quoted values as it is to be used in arguments
        value=${line#*=}
        name=${line%%=*}
        gcloud secrets delete {{fmt_app_name}}-$name --quiet || true
        printf "%s" "$value" | gcloud secrets create {{fmt_app_name}}-$name --data-file=- --replication-policy=user-managed --locations={{region}}
      done;
  - id: 'Create cloud run application'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      export PATH={{common_scripts_path}}:{{workspace}}/bin:$$PATH
      client_email=$$(gcloud config list account --format "value(core.account)")
      echo "
      apiVersion: serving.knative.dev/v1
      kind: Service
      metadata:
        name: {{fmt_app_name}}
      spec:
        template:
          metadata:
            labels:
              codepipes-project: {{fmt_proj}}
              codepipes-environment: {{fmt_env_name}}
            annotations:
              run.googleapis.com/launch-stage: BETA
              {% if useCDN %}run.googleapis.com/ingress: all{% endif %}
              {% if minInstances > 0 %}autoscaling.knative.dev/minScale: "{{minInstances}}"{% endif %}
              {% if maxInstances > 0 %}autoscaling.knative.dev/maxScale: "{{maxInstances}}"{% endif %}
              autoscaling.knative.dev/target: "{{concurrency}}"
              {% if vpcConnector %}run.googleapis.com/vpc-access-connector: projects/$$GOOGLE_PROJECT/locations/{{region}}/connectors/{{vpcConnector}}{% endif %}
          spec:
            serviceAccountName: $$client_email
            containers:
            - image: {{repository}}:{{tag}}
              ports:
              - name: http1
                containerPort: {{containerPort}}
              env:
              - name: DEPLOY_TIMESTAMP
                value: $$(date +%s)
      " >> app.yaml
      env.sh all --non-secrets --quoted --template '        - name: %s\n          value: %s\n' >> app.yaml
      env.sh all --secrets | while IFS= read -r line; do
        name=${line%%=*}
        printf "        - name: %s\n          valueFrom:\n            secretKeyRef:\n              key: '1'\n              name: %s\n" "$name" "{{fmt_app_name}}-$name" >>  app.yaml
      done;

      cat app.yaml
      gcloud run services replace app.yaml --region {{region}}
      {% if domain %}
      gcloud beta run domain-mappings create --service {{fmt_app_name}} --domain {{domain}} --region {{region}} --quiet || true
      {% endif %}
  {% if allowUnauthenticated == true %}
  - id: 'Allow public access'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      echo "bindings:
            - members:
              - allUsers
              role: roles/run.invoker" >> policy.yaml
      gcloud run services set-iam-policy {{fmt_app_name}} policy.yaml  --quiet --region {{region}}
  {% else %}  {% endif %}
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      export PATH={{common_scripts_path}}:{{workspace}}/bin:$$PATH
      outputs.sh add "Service URL" `gcloud run services describe {{fmt_app_name}} --platform managed --region {{region}} --format 'value(status.url)'`
  {% else %}
  - id: 'Remove cloud run application'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      export PATH={{common_scripts_path}}:{{workspace}}/bin:$$PATH
      gcloud beta run services delete {{fmt_app_name}} --region {{region}} --platform managed --quiet;
      env.sh all --secrets | while IFS= read -r line; do
        value=${line#*=}
        name=${line%%=*}
        gcloud secrets delete {{fmt_app_name}}-$name --quiet || true
      done;
  {% endif %}
