provisioner: "aws"
name: "basic-eks-regional"
version: 1
revision: 1
displayName: "EKS deployment"
description: "The bash script to run"
target: "deployment-template"
keywords: ["bash", "linux"]
author: "Ollion"
meta:
  inputArtifactType:
    - ContainerImage
  requiredResources:
    - aws_eks_cluster
inputs:
  type: object
  properties:
    ports:
      title: Ports
      description: Port used in services
      type: array
      default: []
      items:
        type: object
        required: [name, containerPort]
        properties:
          name:
            title: Service name
            type: string
          containerPort:
            title: Container port
            type: integer
            maximum: 65535
          protocol:
            title: Protocol
            type: string
            enum:
              - TCP
              - UDP
            default: TCP
          healthCheck:
            title: Health check path
            type: string
            example: /
            default: ""
    ingress:
      title: Ingress
      description: Ingress Details
      type: array
      default: []
      items:
        type: object
        properties:
          domain:
            title: DomainName
            type: string
            default: ""
          certificateArn:
            title: CertificateARN
            type: string
            default: ""
          appDomain:
            title: AppDomain
            type: string
            default: ""
          externalDNSenabled:
            title: externalDNSenabled
            type: string
            default: "false"
          bucketName:
            title: S3BucketName
            type: string
            default: ""
    cluster:
      title: Cluster Name
      description: Cluster name in which deployment will happen
      type: string
    region:
      title: Region name
      description: region name for cluster
      type: string
    roleArn:
      title: Role ARN
      description: Role for deployment in EKS
      type: string
    app_env:
      title: Application Environment
      description: Application Related Envs
      type: object
      default: {}
    files:
      title: Files
      description: Files mounted in container
      type: object
      default: {}
    repository:
      title: Container Repository
      description: Enter Full container url without tag
      type: string
      default: ""
    tag:
      title: Container tag
      description: Tagged container will deploy
      type: string
      default: latest
    applicationName:
      title: Application name
      description: This is vanguard application name
      type: string
      default: ""
    environment:
      title: Environment Name
      description: This is vanguard environment name
      type: string
      default: ""
    project:
      title: Project Name
      description: This is a vanguard project name
      type: string
      default: ""
    customer_bucket:
      title: Customer Bucket Name
      description: This is a vanguard Customer  bucket name
      type: string
      default: ""
    job_type:
      title: Job Type
      description: This is to deploy or undeploy application
      type: string
      default: deploy
    deployment_timeout:
      title: Deployment Timeout
      description: Time to wait for pods to be ready before terming deployment as unsuccessful
      type: string
      default: 300s
    rollback_enable:
      title: Enable Automatic Rollback
      description: Enabling this option will automatically trigger a rollback of the Helm release in case of deployment failure during the previous deployment.
      type: boolean
      default: true
  required:
    - cluster
    - region
    - roleArn
  internal:
    - app_env
    - files
    - repository
    - tag
    - applicationName
    - environment
    - project
    - customer_bucket
    - job_type
    - working_dir


template: |
  {% set workspace = '$CODEBUILD_SRC_DIR' %}   {# has to be a persistent volume #}
  {% set pipeline_env_file = workspace|add:'/.env' %}
  {% set pipeline_secret_file = workspace|add:'/.secret.env' %}
  {% set pipeline_modules_path = workspace|add:'/pipeline_modules' %}
  {% set helm_chart_path = pipeline_modules_path|add:"/helm/aws/basic-eks" %}
  {% set service_name = applicationName|add:"-"|add:environment|cpi_trimlength:47|cpi_replacespecial %}
  {% set fmt_app_name = applicationName | cpi_replacespecial %}
  {% set fmt_env_name = environment | cpi_replacespecial %}
  {% set fmt_proj = project | cpi_replacespecial %}
  {% set common_scripts_path = pipeline_modules_path|add:'/assets/scripts' %}

  

  version: 0.2
  phases:
    install:
      commands:
        - wget https://get.helm.sh/helm-v3.5.3-linux-amd64.tar.gz
        - tar -zxvf helm-v3.5.3-linux-amd64.tar.gz
        - mv linux-amd64/helm /usr/local/bin/helm
    build:
      commands:
        - export PATH="{{workspace}}/bin:$PATH"
        - aws eks --region {{region}} update-kubeconfig --name {{cluster}} --role-arn {{roleArn}}
        {% if job_type == 'deploy' %}
        - cd {{helm_chart_path}} ;
        - touch .helmignore;
        - |
          {% if files %}
          {% for mounthPath, fs in files %}
          {% if fs %}
          {% for file in fs %}
          aws s3 cp s3://{{customer_bucket}}/{{file}} {{file}} ;
          openssl aes-256-cbc -md sha256 -pbkdf2 -d -in {{file}} -out {{file}} -k $vg_pipeline_artifact_aes_key
          {% endfor %}
          {% endif %}
          {% endfor %}
          # aws s3 rm  s3://{{customer_bucket}} --recursive ;
          {% endif %}
          rm -f values.yaml;

          if [ -z "$docker_registry" ]; then
          export docker_registry="index.docker.io"
          fi

          echo "applicationName: {{fmt_app_name}} #auto
          environment:  {{fmt_env_name}} #auto
          project: {{fmt_proj}} #auto

          deploy:
            replicaCount: 1
            strategy: RollingUpdate
            maxUnavail: 1
            maxSurge: 1
            terminationGracePeriodSeconds: 30
            healthCheck:
              liveFailThreshold: '2'
              liveSuccThreshold: '1'
              readFailThreshold: '2'
              readSuccThreshold: '1'
              delay: '10'
              period: '4'
              timeout: '2'

          ports:
          {% for port in ports%}
            - name: {{port.name}}
              containerPort: {{port.containerPort}}
              protocol: {{port.protocol}}
              {% if port.healthCheck %}
              healthcheck: {{port.healthCheck}}
              {% endif %}
          {% endfor %}

          image: #auto
            repository: {{ repository }}
            pullPolicy: Always
            tag:  {{ tag }}
            registryCredentials:
              registry: $docker_registry
              username: $docker_username" >> values.yaml

          printf '    password: %s\n' "$(printf '%s' "$docker_password" | jq -aRs .)" >> values.yaml

          echo "
          {% for ing in ingress%}
          {% if ing.domain %}
          ingress:
            domain: {{ing.domain}}
            certificateArn: {{ing.certificateArn}}
            {% if ing.bucketName %}
            bucketName: {{ing.bucketName}}
            {% endif %}
            {% if ing.appDomain %}
            appDomain: {{ing.appDomain}}
            {% else %}
            appDomain: {{fmt_app_name}}.{{ing.domain}}
            {% endif %}
            externalDNSenabled: {{ing.externalDNSenabled}}
          {% endif %}
          {% endfor %}

          service:
            type: nodeport
            private: false

          autoscaling:
            enabled: false
            minReplicas: 1
            maxReplicas: 5
            targetCPUUtilizationPercentage: 80

          resourcequota:
            quotaRequestsCpu: 100
            quotaRequestsMem: 0.2
            quotaLimitsCpu: 200
            quotaLimitsMem: 0.3

          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi

          lifecycle:
            prestop:
              command: ['/bin/sh', '-c', 'sleep 30']

          artifacts:
          {% for mountPath, fs in files %}
            - mountPath: {{mountPath}}
              files:
              {% for file in fs %}
                - '{{file}}'
              {% endfor %}
          {% endfor %}
          envs:
          " >> values.yaml
          cat {{pipeline_env_file}} | while IFS= read -r line; do
          value=${line#*=}
          name=${line%%=*}
          printf '  %s: %s\n' "$name" "$value" >> values.yaml
          done;
          echo "secrets:" >> values.yaml;
          cat {{pipeline_secret_file}} | while IFS= read -r line; do
          value=${line#*=}
          name=${line%%=*}
          printf '  %s: %s\n' $name $value >> values.yaml
          done;
        - |
          helm upgrade --install -f values.yaml {{service_name}} . --wait --timeout {{deployment_timeout}}
          {% if rollback_enable %}
            #Get Status code
            helm_upgrade_exit_status=$?
            echo 'Helm release status of EXIT_CODE: '$helm_upgrade_exit_status''
            # Check the Helm upgrade/install status
            if [ $helm_upgrade_exit_status -eq 0 ]; then
              echo "Helm upgrade/install successful...."
            else
              # Helm upgrade/install failed
              echo "Helm upgrade/install failed. Rolling back pervious version..."
              
              # Perform the Helm rollback
              helm  rollback {{service_name}}  0 --wait --timeout {{deployment_timeout}}
              if [ $? -eq 0 ]; then
                echo "Helm Rollback completed..."
                echo "Action Required: Check your deployment  on k8s cluster why it Rollbacked"
                kubectl rollout restart deployment {{fmt_app_name}}-deployment -n {{fmt_app_name}}
                kubectl rollout status deployment {{fmt_app_name}}-deployment   -n {{fmt_app_name}}          
                # Exit with a non-zero status code to indicate pipeline failure
                exit 1
              else
                echo "Helm Rollback also failed ..."
                exit 1
              fi
            fi
          {% endif %}
        - kubectl rollout restart deployment {{fmt_app_name}}-deployment -n {{fmt_app_name}}
        - kubectl rollout status deployment {{fmt_app_name}}-deployment   -n {{fmt_app_name}}

          {% if ports %}
            {% if ingress && ingress.0.domain %}
              {% set kube_out_path="{.items[*].metadata.annotations.external-dns\\.alpha\\.kubernetes\\.io\\/hostname}" %}
              {% set url_protocol= "https" %}
            {% else %}
              {% set kube_out_path="{.items[*].status.loadBalancer.ingress[*].hostname}" %}
              {% set url_protocol= "http" %}
            {% endif %}
        - |
          export PATH={{ common_scripts_path }}:$PATH
          cd {{ workspace }}
          echo 'kubectl get ingress -n {{ fmt_app_name | cpi_quote }} -o=jsonpath={{ kube_out_path| cpi_quote }} | tr -d \"' > cmd.sh
          summary=$(retry.sh run "bash ./cmd.sh" 30 2)
          if [ $? -ne 0 ]; then
            echo "Ingress not found"
            Error=$(kubectl describe ingress -n {{ fmt_app_name | cpi_quote }} | awk '/Events:/,/^\s*$/' | grep -v 'Events:')
            echo "Error: $Error"
            else
              outputs.sh add "Service URL" "{{url_protocol}}://$summary"
            fi
          {% endif %}
      {% else %}
        - helm uninstall {{service_name}}
      {% endif %}

